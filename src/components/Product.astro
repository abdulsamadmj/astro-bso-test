---
import { routes } from "../utils/constants";

interface Props {
  pID: string;
  title: string;
  image: string;
  price: number;
}
const { pID, title, image, price } = Astro.props;

const token = Astro.cookies.get("jwt");
---

<div
  id={pID}
  class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800"
>
  <div class="h-56 w-full">
    <a href={routes.PRODUCTS + "/" + pID}>
      <img
        class="mx-auto h-full dark:hidden object-contain"
        src={image}
        alt={title}
      />
    </a>
  </div>
  <div class="pt-6">
    <a
      href={routes.PRODUCTS + "/" + pID}
      class="text-lg font-semibold leading-tight text-gray-900 hover:underline dark:text-white"
      ><p class="w-[75vw] sm:w-full truncate">{title}</p></a
    >

    <ul class="mt-2 flex items-center gap-4">
      <li class="flex items-center gap-2">
        <svg
          class="h-4 w-4 text-gray-500 dark:text-gray-400"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M13 7h6l2 4m-8-4v8m0-8V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v9h2m8 0H9m4 0h2m4 0h2v-4m0 0h-5m3.5 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-10 0a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"
          >
          </path>
        </svg>
        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">
          Fast Delivery
        </p>
      </li>

      <li class="flex items-center gap-2">
        <svg
          class="h-4 w-4 text-gray-500 dark:text-gray-400"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-width="2"
            d="M8 7V6c0-.6.4-1 1-1h11c.6 0 1 .4 1 1v7c0 .6-.4 1-1 1h-1M3 18v-7c0-.6.4-1 1-1h11c.6 0 1 .4 1 1v7c0 .6-.4 1-1 1H4a1 1 0 0 1-1-1Zm8-3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"
          >
          </path>
        </svg>
        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">
          Best Price
        </p>
      </li>
    </ul>

    <div class="mt-4 flex items-center justify-between gap-4">
      <p
        class="text-2xl font-extrabold leading-tight text-gray-900 dark:text-white"
      >
        ${price}
      </p>

      <button
        type="button"
        id={"addToCart" + pID}
        class="inline-flex items-center rounded-lg bg-primary-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-primary-800 focus:outline-none focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
      >
        <svg
          class="-ms-2 me-2 h-5 w-5"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 4h1.5L8 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm.75-3H7.5M11 7H6.312M17 4v6m-3-3h6"
          >
          </path>
        </svg>
        Add to cart
      </button>
    </div>
  </div>
</div>

<script define:vars={{ pID, token }}>
  function showToast(type, message) {
    // toast template based on the type (success, error)
    const toastTypes = {
      success: `
        <div id="toast-success" class="flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
          <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200">
            <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"/>
            </svg>
            <span class="sr-only">Check icon</span>
          </div>
          <div class="ms-3 text-sm font-normal">${message}</div>
        </div>`,
      error: `
        <div id="toast-error" class="flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
          <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
            <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
            </svg>
            <span class="sr-only">Error icon</span>
          </div>
          <div class="ms-3 text-sm font-normal">${message}</div>
        </div>`,
    };

    // Create a new toast div and append it to the container
    const toastContainer = document.getElementById("toast-container");
    const toast = document.createElement("div");
    toast.innerHTML = toastTypes[type];
    toastContainer.appendChild(toast);

    // Remove the toast after 3 seconds
    setTimeout(() => {
      toast.remove();
    }, 3000);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const addToCartButton = document.getElementById("addToCart" + pID);
    addToCartButton?.addEventListener("click", async () => {
      if (token) {
        // make the add to cart button disabled
        addToCartButton?.setAttribute("disabled", true);
        const reqBody = {
          pID,
        };
        try {
          response = await fetch("/api/cart/add", {
            method: "put",
            body: JSON.stringify(reqBody),
          });

          addToCartButton?.removeAttribute("disabled");
          if (response.ok) {
            showToast("success", "Item added to cart successfully.");
          } else {
            showToast("error", "Failed to add item to cart.");
          }
        } catch (error) {
          addToCartButton?.removeAttribute("disabled");
          throw new Error(error);
        }
      } else {
        document.location.replace("/login");
      }
    });
  });
</script>
